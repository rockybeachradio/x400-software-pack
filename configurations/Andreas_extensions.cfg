################################################################################################
# File: Andreas_extensions.cfg
# Author: Andreas
# Date: 202508020
# purpose: Zuk√ºnfitge Ideen / Erweiterungen
# 
# Content
# - Temoperature and Colling
# - endstop calibration
# - ?
#
#
# include in printer.cfg
################################################################################################


################################################################################################
################################################################################################
### Temperature and Cooling
################################################################################################
################################################################################################

#####################################################################
#	Temperature Monitoring
#
# Von Fly Board
# Quelle: https://youtu.be/_AkzbdvBB8A?si=YNd_dwbWZqg8NjSX&t=1474
# Pr√ºfenb ob es bie SKIPR auch m√∂glichist.
#####################################################################
#[temperature_sensor STM32]         # FLY mainboard temeprature
#sensor_type: temperature_mcu       # Linkes to the MCU (default)

#[temperature:sensor SPC]             # Host temeprature
#sensor_type: temeprature_host       # Linked to the host device


####################################################################
# Printer off switch
# https://docs.mainsail.xyz/overview/quicktips/printer-power-switch
#####################################################################
[power printer]
# Important is the name "printer" and the attribute "bound_services: klipper".
# Mainsail will use this power device to check for a "powered off" printer.
type: <any type>
...
bound_services: klipper


####################################################################
# Temperature- Show temperatures
#####################################################################
[temperature_sensor soc_temp]         # SoC temperature (Linux CPU)
#sensor_mcu:                          # not needed
sensor_type: temperature_host         # Linkes to the SoC (default)
min_temp: 20
max_temp: 85

[temperature_sensor mcu_temp]         # Controller (STM32 chip)
sensor_mcu: mcu
sensor_type: temperature_mcu         # Linkes to the MCU (default)
min_temp: 0                             # minimal value. If sensodr reads below that value, it assumes failure (in ¬∞C)
max_temp: 85                          # max acceptable temperature. If temperature exceeds, Klipper thwows an error (in ¬∞C)

[temperature_sensor eecan_rp2040_temp]  # Temperatur of the RP2040 Chips in the toolhead baord
sensor_mcu: EECAN
sensor_type: temperature_mcu
min_temp: 0
max_temp: 85


#####################################################################
# Macro - Warn or Shutdown if too hot
#####################################################################
[gcode_macro CHECK_TEMPS]
description: Checks MCU and SoC temperatures and warns or aborts
gcode:
  {% set mcu_temp = printer["temperature_sensor mcu_temp"].temperature|float %}
  {% set soc_temp = printer["temperature_sensor soc_temp"].temperature|float %}
  
  {% if mcu_temp > 85 or soc_temp > 85 %}
    { action_respond_error("üî• MCU or SoC temperature is TOO HIGH! Emergency Shutdown!") }
    M112 ; emergency stop
  {% elif mcu_temp > 75 or soc_temp > 75 %}
    { action_respond_info("‚ö†Ô∏è High temperature warning: MCU = %.1f¬∞C, SoC = %.1f¬∞C" % (mcu_temp, soc_temp)) }
  {% else %}
    { action_respond_info("‚úÖ Temperatures OK: MCU = %.1f¬∞C, SoC = %.1f¬∞C" % (mcu_temp, soc_temp)) }
  {% endif %}


#####################################################################
# Macro - Turn on fan if temps are too high
#####################################################################
[fan_generic board_cooling_fan]
pin: your_board_fan_pin  # e.g., PA1
max_power: 1.0
kick_start_time: 0.5
off_below: 0.2

[gcode_macro AUTO_COOL]
description: Automatically enables board cooling fan if MCU or SoC is hot
gcode:
  {% set mcu_temp = printer["temperature_sensor mcu_temp"].temperature|float %}
  {% set soc_temp = printer["temperature_sensor soc_temp"].temperature|float %}

  {% if mcu_temp > 60 or soc_temp > 60 %}
    SET_FAN_SPEED FAN=board_cooling_fan SPEED=1.0
    { action_respond_info("Cooling fan ON (MCU=%.1f¬∞C, SoC=%.1f¬∞C)" % (mcu_temp, soc_temp)) }
  {% else %}
    SET_FAN_SPEED FAN=board_cooling_fan SPEED=0.0
    { action_respond_info("Cooling fan OFF (Temps OK)") }
  {% endif %}


#####################################################################
# Add to PRINT_START or Scheduled Task
#####################################################################
# Run CHECK_TEMPS or AUTO_COOL automatically, you can add this to your PRINT_START macro:
[gcode_macro PRINT_START]
gcode:
  CHECK_TEMPS
  AUTO_COOL
  G28
  ; other startup code

# Use [delayed_gcode] to check periodically:
[delayed_gcode auto_cooler]
initial_duration: 60
gcode:
  AUTO_COOL
  UPDATE_DELAYED_GCODE ID=auto_cooler DURATION=30





################################################################################################
################################################################################################
### MCU Update
#
#
# # $ ~/klippy-env/bin/python ~/katapult/scripts/canbus_query.py can0     # UUID ermitteln
################################################################################################
################################################################################################
[gcode_shell_command SH_MCU_UPDATE]
command: /home/mks/printer_data/scripts/mcu_update.sh {params}      # executes the shell command mcu_update.sh
                                                                    # ??? ttyACM0 mu√ü gepr√ºft werdne ???
timeout:120                                                         # Maximum tine Klipper will wait for the script to complete before aborting. (in seconds)
verbose: True


[gcode_macro mcu_update_board]
description: Flash the MCU (STM32) on the Skipr board via USB bus
 #$ make -j4 flash FLASH_DEVICE=/dev/ttyACM0
gcode:
  {% set cfg  = "~/printer_data/make_config_files/stm32f407_firmware.config" %}                           # config file for make menuconfig
  {% set flash_device = "/dev/ttyACM0" %}                                                                 # FLASH_DEVICE = PORT f√ºr STM43f407 auf MKS Skipr board
  {% set uuid = printer.configfile.settings["mcu"]["canbus_uuid"] %}                                      # UUID
  RUN_SHELL_COMMAND CMD=SH_MCU_UPDATE PARAMS="-m usb -c {{ cfg }} -d {{ flash_device }} -u {{ uuid }}"    # Calls the gcode_shell_command sh_mcu_update


[gcode_macro mcu_update_toolhead]
description: Flash the Controller (RP2040) on the toolhead board via CAN bus
gcode:
  {% set cfg  = "~/printer_data/make_config_files/eecan_firmware.config" %}         # config file for make menuconfig
  {% set flash_device = "2e8a:0003???" %}                                           #
  {% set uuid = printer.configfile.settings["mcu EECAN"]["canbus_uuid"] %}          # UUID
  RUN_SHELL_COMMAND CMD=SH_MCU_UPDATE PARAMS="-m can -c {{ cfg }} -u {{ uuid }}"    # Calls the gcode_shell_command sh_mcu_update


[gcode_macro linux_mcu_update]
description: update the Linux MCU
gcode:


[gcode_macro mcu_update_all]
description: Flash the Skipr board MCU and the toolhead board controller
gcode:
  mcu_update_board
  mcu_update_toolhead
  linux_mcu_update



################################################################################################
################################################################################################
### Varia
################################################################################################
################################################################################################


#####################################################################
# Backup button
#####################################################################
[gcode_shell_command shell_backup]
command: ~/x400-software-pack/scripts/scripts/backup.sh   # Creates a local backup and copies it to SMB/GitHub
#command: id
timeout: 10
verbose: True

[gcode_macro Backup]
gcode:
  RUN_SHELL_COMMAND CMD=shell_backup


#####################################################################
# Backup button
#####################################################################
[gcode_shell_command shell_update_x400_software_pack]
command: ~/x400-software-pack/scripts/update.sh     # Pulls the newest x400-software-pack and installs it
timeout: 10
verbose: True

[gcode_macro update_x400_software_pack]
gcode:
  RUN_SHELL_COMMAND CMD=shell_update_x400_software_pack


#####################################################################
# Enstop calibration
#####################################################################
[endstop_phase]
# End Stop hapse calibration. Mur mit TCM Driver which are connected via UART.
# https://youtu.be/nqGv3xfeXKA?si=EbVUe6v6otJsaKoY&t=696


#####################################################################
# 
#####################################################################

